// ======================================================================
// COMPREHENSIVE INSURANCE COMPANY DATABASE CREATION SCRIPT
// Neo4j Enterprise 2025.06.0 Compatible
// Container: neo4j
// Expanded Insurance Business Model with 1000+ Entities
// ======================================================================

// ======================================================================
// PHASE 0: DATABASE INITIALIZATION
// ======================================================================

// Switch to the insurance database
:use insurance;

// ======================================================================
// PHASE 1: DATABASE CLEANUP AND VERIFICATION
// ======================================================================

// Complete database cleanup
MATCH (n) DETACH DELETE n;

// Verify database is empty
MATCH (n) RETURN count(n) AS remaining_nodes;

// ======================================================================
// PHASE 2: SCHEMA CREATION (CONSTRAINTS AND INDEXES)
// ======================================================================

// Create uniqueness constraints for data integrity
CREATE CONSTRAINT customer_id_unique FOR (c:Customer) REQUIRE c.customerId IS UNIQUE;
CREATE CONSTRAINT policy_number_unique FOR (p:Policy) REQUIRE p.policyNumber IS UNIQUE;
CREATE CONSTRAINT claim_id_unique FOR (cl:Claim) REQUIRE cl.claimId IS UNIQUE;
CREATE CONSTRAINT agent_id_unique FOR (a:Agent) REQUIRE a.agentId IS UNIQUE;
CREATE CONSTRAINT branch_code_unique FOR (b:Branch) REQUIRE b.branchCode IS UNIQUE;
CREATE CONSTRAINT vehicle_vin_unique FOR (v:Vehicle) REQUIRE v.vin IS UNIQUE;
CREATE CONSTRAINT property_id_unique FOR (pr:Property) REQUIRE pr.propertyId IS UNIQUE;
CREATE CONSTRAINT payment_id_unique FOR (pay:Payment) REQUIRE pay.paymentId IS UNIQUE;
CREATE CONSTRAINT underwriter_id_unique FOR (u:Underwriter) REQUIRE u.underwriterId IS UNIQUE;

// Create performance indexes
CREATE INDEX customer_email_index FOR (c:Customer) ON (c.email);
CREATE INDEX customer_phone_index FOR (c:Customer) ON (c.phone);
CREATE INDEX policy_status_index FOR (p:Policy) ON (p.status);
CREATE INDEX policy_type_index FOR (p:Policy) ON (p.type);
CREATE INDEX claim_status_index FOR (cl:Claim) ON (cl.status);
CREATE INDEX claim_date_index FOR (cl:Claim) ON (cl.incidentDate);
CREATE INDEX agent_territory_index FOR (a:Agent) ON (a.territory);
CREATE INDEX branch_region_index FOR (b:Branch) ON (b.region);
CREATE INDEX payment_date_index FOR (pay:Payment) ON (pay.paymentDate);

// ======================================================================
// PHASE 3: CORPORATE STRUCTURE AND LOCATIONS
// ======================================================================

// Create Corporate Headquarters
CREATE (corporate:Branch:HeadQuarters:CorporateOffice {
  branchCode: 'CORP000',
  name: 'SecureLife Insurance Corporate Headquarters',
  address: '2500 Corporate Center Drive',
  city: 'Chicago',
  state: 'IL',
  zipCode: '60601',
  phone: '312-555-0000',
  region: 'Corporate',
  established: date('1985-01-15'),
  employees: 750,
  isHeadquarters: true,
  isCorporate: true,
  operationalBudget: 125000000,
  departments: ['Executive', 'Legal', 'Compliance', 'IT', 'HR', 'Finance', 'Marketing']
})

// Create Home Office (separate from HQ)
CREATE (homeOffice:Branch:HomeOffice {
  branchCode: 'HOME001',
  name: 'SecureLife Home Office Operations',
  address: '1800 Operations Boulevard',
  city: 'Chicago',
  state: 'IL',
  zipCode: '60602',
  phone: '312-555-0100',
  region: 'Operations',
  established: date('1987-06-20'),
  employees: 450,
  isHomeOffice: true,
  departments: ['Claims Processing', 'Underwriting', 'Customer Service', 'Policy Administration'],
  operationalBudget: 85000000
})

// Create Regional Headquarters
CREATE (regionalHQ_east:Branch:RegionalHeadquarters {
  branchCode: 'RHQ001',
  name: 'SecureLife Eastern Regional Headquarters',
  address: '1200 Financial District Plaza',
  city: 'New York',
  state: 'NY',
  zipCode: '10004',
  phone: '212-555-0200',
  region: 'Northeast',
  established: date('1990-03-10'),
  employees: 280,
  isRegionalHQ: true,
  operationalBudget: 45000000,
  territoryStates: ['NY', 'NJ', 'CT', 'MA', 'PA']
})

CREATE (regionalHQ_west:Branch:RegionalHeadquarters {
  branchCode: 'RHQ002',
  name: 'SecureLife Western Regional Headquarters',
  address: '3500 Pacific Coast Highway',
  city: 'Los Angeles',
  state: 'CA',
  zipCode: '90028',
  phone: '310-555-0300',
  region: 'West',
  established: date('1992-11-15'),
  employees: 265,
  isRegionalHQ: true,
  operationalBudget: 42000000,
  territoryStates: ['CA', 'NV', 'AZ', 'OR', 'WA']
})

CREATE (regionalHQ_south:Branch:RegionalHeadquarters {
  branchCode: 'RHQ003',
  name: 'SecureLife Southern Regional Headquarters',
  address: '4200 Commerce Center',
  city: 'Atlanta',
  state: 'GA',
  zipCode: '30309',
  phone: '404-555-0400',
  region: 'Southeast',
  established: date('1995-05-22'),
  employees: 245,
  isRegionalHQ: true,
  operationalBudget: 38000000,
  territoryStates: ['GA', 'FL', 'SC', 'NC', 'TN', 'AL']
})

// Create Local Branches
WITH [
  {code: 'BR001', name: 'Manhattan Financial District', address: '85 Broad Street', city: 'New York', state: 'NY', zip: '10004', phone: '212-555-1001', region: 'Northeast', est: '1993-08-15', emp: 85, budget: 12000000},
  {code: 'BR002', name: 'Brooklyn Heights', address: '200 Montague Street', city: 'Brooklyn', state: 'NY', zip: '11201', phone: '718-555-1002', region: 'Northeast', est: '1996-02-20', emp: 65, budget: 8500000},
  {code: 'BR003', name: 'Los Angeles Downtown', address: '633 West Fifth Street', city: 'Los Angeles', state: 'CA', zip: '90071', phone: '213-555-1003', region: 'West', est: '1994-11-10', emp: 78, budget: 11000000},
  {code: 'BR004', name: 'Beverly Hills', address: '9465 Wilshire Boulevard', city: 'Beverly Hills', state: 'CA', zip: '90212', phone: '310-555-1004', region: 'West', est: '1998-07-08', emp: 72, budget: 10500000},
  {code: 'BR005', name: 'Miami Beach', address: '1688 Meridian Avenue', city: 'Miami Beach', state: 'FL', zip: '33139', phone: '305-555-1005', region: 'Southeast', est: '1997-04-12', emp: 68, budget: 9200000},
  {code: 'BR006', name: 'Atlanta Midtown', address: '1180 Peachtree Street', city: 'Atlanta', state: 'GA', zip: '30309', phone: '404-555-1006', region: 'Southeast', est: '1999-09-25', emp: 75, budget: 9800000},
  {code: 'BR007', name: 'Dallas Uptown', address: '2100 McKinney Avenue', city: 'Dallas', state: 'TX', zip: '75201', phone: '214-555-1007', region: 'South', est: '2000-01-18', emp: 70, budget: 9500000},
  {code: 'BR008', name: 'Houston Energy Corridor', address: '15455 Dallas Parkway', city: 'Houston', state: 'TX', zip: '77079', phone: '713-555-1008', region: 'South', est: '2001-06-30', emp: 73, budget: 9700000},
  {code: 'BR009', name: 'Phoenix Scottsdale', address: '8687 East Via de Ventura', city: 'Scottsdale', state: 'AZ', zip: '85258', phone: '480-555-1009', region: 'West', est: '2002-03-14', emp: 62, budget: 8000000},
  {code: 'BR010', name: 'Seattle Bellevue', address: '10900 NE 8th Street', city: 'Bellevue', state: 'WA', zip: '98004', phone: '425-555-1010', region: 'West', est: '2003-10-05', emp: 58, budget: 7500000}
] AS branchData
UNWIND branchData AS bData
CREATE (b:Branch {
  branchCode: bData.code,
  name: bData.name,
  address: bData.address,
  city: bData.city,
  state: bData.state,
  zipCode: bData.zip,
  phone: bData.phone,
  region: bData.region,
  established: date(bData.est),
  employees: bData.emp,
  operationalBudget: bData.budget
});

// ======================================================================
// PHASE 4: MANAGEMENT AND STAFF STRUCTURE
// ======================================================================

// Create Executive Leadership
CREATE (ceo:Agent:Executive:CEO {
  agentId: 'EXEC001',
  firstName: 'William',
  lastName: 'Harrison',
  email: 'w.harrison@securelife.com',
  phone: '312-555-9001',
  title: 'Chief Executive Officer',
  hireDate: date('2015-01-02'),
  salary: 2500000,
  department: 'Executive',
  yearsExperience: 25,
  education: 'MBA Finance - Wharton'
})

CREATE (coo:Agent:Executive:COO {
  agentId: 'EXEC002',
  firstName: 'Patricia',
  lastName: 'Chen',
  email: 'p.chen@securelife.com',
  phone: '312-555-9002',
  title: 'Chief Operating Officer',
  hireDate: date('2016-03-15'),
  salary: 1850000,
  department: 'Operations',
  yearsExperience: 22,
  education: 'MBA Operations - Kellogg'
})

CREATE (cfo:Agent:Executive:CFO {
  agentId: 'EXEC003',
  firstName: 'Robert',
  lastName: 'Martinez',
  email: 'r.martinez@securelife.com',
  phone: '312-555-9003',
  title: 'Chief Financial Officer',
  hireDate: date('2017-07-20'),
  salary: 1750000,
  department: 'Finance',
  yearsExperience: 20,
  education: 'CPA, MBA Finance - Chicago Booth'
});

// Create Regional Managers
WITH [
  {id: 'RM001', first: 'Michael', last: 'Thompson', email: 'm.thompson@securelife.com', phone: '212-555-8001', region: 'Northeast', hire: '2018-02-10', salary: 350000, exp: 18},
  {id: 'RM002', first: 'Sarah', last: 'Williams', email: 's.williams@securelife.com', phone: '310-555-8002', region: 'West', hire: '2018-05-15', salary: 340000, exp: 16},
  {id: 'RM003', first: 'David', last: 'Johnson', email: 'd.johnson@securelife.com', phone: '404-555-8003', region: 'Southeast', hire: '2019-01-08', salary: 330000, exp: 15}
] AS regionalMgrData
UNWIND regionalMgrData AS rmData
CREATE (rm:Agent:Manager:RegionalManager {
  agentId: rmData.id,
  firstName: rmData.first,
  lastName: rmData.last,
  email: rmData.email,
  phone: rmData.phone,
  title: 'Regional Manager',
  territory: rmData.region,
  hireDate: date(rmData.hire),
  salary: rmData.salary,
  yearsExperience: rmData.exp,
  managerLevel: 'Regional'
});

// Create Branch Managers
WITH [
  {id: 'BM001', first: 'Jennifer', last: 'Davis', email: 'j.davis@securelife.com', phone: '212-555-7001', branch: 'BR001', hire: '2019-03-20', salary: 180000, exp: 12},
  {id: 'BM002', first: 'Christopher', last: 'Miller', email: 'c.miller@securelife.com', phone: '718-555-7002', branch: 'BR002', hire: '2019-06-15', salary: 165000, exp: 11},
  {id: 'BM003', first: 'Lisa', last: 'Wilson', email: 'l.wilson@securelife.com', phone: '213-555-7003', branch: 'BR003', hire: '2020-01-10', salary: 175000, exp: 13},
  {id: 'BM004', first: 'Mark', last: 'Brown', email: 'm.brown@securelife.com', phone: '310-555-7004', branch: 'BR004', hire: '2020-04-22', salary: 185000, exp: 14},
  {id: 'BM005', first: 'Amanda', last: 'Garcia', email: 'a.garcia@securelife.com', phone: '305-555-7005', branch: 'BR005', hire: '2020-08-18', salary: 170000, exp: 10}
] AS branchMgrData
UNWIND branchMgrData AS bmData
CREATE (bm:Agent:Manager:BranchManager {
  agentId: bmData.id,
  firstName: bmData.first,
  lastName: bmData.last,
  email: bmData.email,
  phone: bmData.phone,
  title: 'Branch Manager',
  hireDate: date(bmData.hire),
  salary: bmData.salary,
  yearsExperience: bmData.exp,
  managerLevel: 'Branch',
  branchCode: bmData.branch
});

// Create Sales Agents (30 agents across branches)
WITH range(1, 30) AS agentNumbers
UNWIND agentNumbers AS num
CREATE (agent:Agent:SalesAgent {
  agentId: 'AGT' + CASE WHEN num < 100 THEN '0' + toString(num) ELSE toString(num) END,
  firstName: ['James', 'Mary', 'Robert', 'Patricia', 'John', 'Jennifer', 'Michael', 'Linda', 'William', 'Elizabeth'][num % 10],
  lastName: ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis', 'Rodriguez', 'Martinez'][num % 10],
  email: toLower(['James', 'Mary', 'Robert', 'Patricia', 'John', 'Jennifer', 'Michael', 'Linda', 'William', 'Elizabeth'][num % 10]) + '.' + 
         toLower(['Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis', 'Rodriguez', 'Martinez'][num % 10]) + 
         toString(num) + '@securelife.com',
  phone: ['212', '310', '404', '214', '305', '713', '480', '425'][num % 8] + '-555-' + 
         CASE WHEN (5000 + num) < 10000 THEN '0' + toString(5000 + num) ELSE toString(5000 + num) END,
  licenseNumber: ['NY', 'CA', 'GA', 'TX', 'FL'][num % 5] + '-' + toString(1000000 + num),
  hireDate: date('2018-01-01') + duration({days: (num * 45) % 1800}),
  territory: ['New York Metro', 'Los Angeles Area', 'Atlanta Region', 'Dallas Metro', 'Miami Area', 'Houston Area', 'Phoenix Area', 'Seattle Area'][num % 8],
  specialization: [['Auto', 'Home'], ['Life', 'Health'], ['Commercial', 'Umbrella'], ['Auto', 'Motorcycle'], ['Home', 'Condo']][num % 5],
  commissionRate: 0.04 + (num % 5) * 0.01,
  salesTarget: 800000 + (num * 50000),
  yearsExperience: 2 + (num % 15),
  branchCode: ['BR001', 'BR002', 'BR003', 'BR004', 'BR005', 'BR006', 'BR007', 'BR008', 'BR009', 'BR010'][num % 10]
});

// Create Underwriters
WITH range(1, 15) AS underwriterNumbers
UNWIND underwriterNumbers AS num
CREATE (uw:Underwriter {
  underwriterId: 'UW' + CASE WHEN num < 10 THEN '0' + toString(num) ELSE toString(num) END,
  firstName: ['Thomas', 'Nancy', 'Daniel', 'Betty', 'Paul', 'Helen', 'Mark', 'Sandra', 'Donald', 'Donna'][num % 10],
  lastName: ['Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson'][num % 10],
  email: toLower(['Thomas', 'Nancy', 'Daniel', 'Betty', 'Paul', 'Helen', 'Mark', 'Sandra', 'Donald', 'Donna'][num % 10]) + '.' + 
         toLower(['Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson'][num % 10]) + 
         toString(num) + '@securelife.com',
  phone: '312-555-' + toString(4000 + num),
  department: 'Underwriting',
  specialization: ['Personal Lines', 'Commercial Lines', 'Life Insurance', 'Health Insurance', 'Property Risk'][num % 5],
  hireDate: date('2015-01-01') + duration({days: (num * 120) % 2500}),
  salary: 85000 + (num * 5000),
  yearsExperience: 5 + (num % 20),
  riskCertifications: [['CPCU'], ['ARM', 'CPCU'], ['CLU'], ['ChFC'], ['AINS']][num % 5]
});

// ======================================================================
// PHASE 5: COMPREHENSIVE CUSTOMER BASE (200 customers)
// ======================================================================

// Create High-Value Premium Customers
WITH [
  {id: 'CUST001', first: 'Alexander', last: 'Vanderbilt', email: 'a.vanderbilt@email.com', phone: '212-555-2001', dob: '1965-08-15', addr: '740 Park Avenue', city: 'New York', state: 'NY', zip: '10021', since: '2010-03-20', credit: 815, risk: 'Low', contact: 'Email', premiums: 125000, value: 2500000, segment: 'Ultra High Net Worth'},
  {id: 'CUST002', first: 'Victoria', last: 'Rothschild', email: 'v.rothschild@email.com', phone: '310-555-2002', dob: '1970-12-03', addr: '1500 Tower Grove Drive', city: 'Beverly Hills', state: 'CA', zip: '90210', since: '2012-07-14', credit: 825, risk: 'Low', contact: 'Phone', premiums: 115000, value: 2200000, segment: 'Ultra High Net Worth'},
  {id: 'CUST003', first: 'Harrison', last: 'Rockefeller', email: 'h.rockefeller@email.com', phone: '404-555-2003', dob: '1968-05-22', addr: '4500 Northside Drive', city: 'Atlanta', state: 'GA', zip: '30327', since: '2011-09-15', credit: 798, risk: 'Low', contact: 'Email', premiums: 98000, value: 1850000, segment: 'Ultra High Net Worth'},
  {id: 'CUST004', first: 'Elizabeth', last: 'Carnegie', email: 'e.carnegie@email.com', phone: '214-555-2004', dob: '1973-11-30', addr: '6000 Turtle Creek Boulevard', city: 'Dallas', state: 'TX', zip: '75219', since: '2013-04-08', credit: 789, risk: 'Low', contact: 'Text', premiums: 87000, value: 1650000, segment: 'High Net Worth'},
  {id: 'CUST005', first: 'Theodore', last: 'Astor', email: 't.astor@email.com', phone: '305-555-2005', dob: '1972-02-14', addr: '1 Star Island Drive', city: 'Miami Beach', state: 'FL', zip: '33139', since: '2014-11-22', credit: 776, risk: 'Low', contact: 'Phone', premiums: 92000, value: 1750000, segment: 'High Net Worth'}
] AS premiumCustomers
UNWIND premiumCustomers AS pCust
CREATE (c:Customer:PremiumCustomer {
  customerId: pCust.id,
  firstName: pCust.first,
  lastName: pCust.last,
  email: pCust.email,
  phone: pCust.phone,
  dateOfBirth: date(pCust.dob),
  ssn: 'XXX-XX-' + toString(1000 + toInteger(substring(pCust.id, 4))),
  address: pCust.addr,
  city: pCust.city,
  state: pCust.state,
  zipCode: pCust.zip,
  customerSince: date(pCust.since),
  creditScore: pCust.credit,
  riskProfile: pCust.risk,
  preferredContact: pCust.contact,
  totalPremiums: pCust.premiums,
  lifetimeValue: pCust.value,
  customerSegment: pCust.segment,
  assignedBranch: CASE 
    WHEN pCust.state = 'NY' THEN 'BR001'
    WHEN pCust.state = 'CA' THEN 'BR003'
    WHEN pCust.state = 'GA' THEN 'BR006'
    WHEN pCust.state = 'TX' THEN 'BR007'
    WHEN pCust.state = 'FL' THEN 'BR005'
    ELSE 'BR001' END
});

// Create Standard Customers (bulk creation - 195 more customers)
WITH range(6, 200) AS customerNumbers
UNWIND customerNumbers AS num
CREATE (c:Customer {
  customerId: 'CUST' + CASE WHEN num < 100 THEN '0' + toString(num) ELSE toString(num) END,
  firstName: ['Michael', 'Sarah', 'David', 'Jessica', 'Christopher', 'Ashley', 'Matthew', 'Amanda', 'Joshua', 'Stephanie', 'Andrew', 'Melissa', 'Daniel', 'Nicole', 'Anthony', 'Kimberly', 'Mark', 'Linda', 'Paul', 'Angela'][num % 20],
  lastName: ['Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis', 'Rodriguez', 'Martinez', 'Hernandez', 'Lopez', 'Gonzalez', 'Wilson', 'Anderson', 'Thomas', 'Taylor', 'Moore', 'Jackson', 'Martin', 'Lee'][num % 20],
  email: toLower(['Michael', 'Sarah', 'David', 'Jessica', 'Christopher', 'Ashley', 'Matthew', 'Amanda', 'Joshua', 'Stephanie'][num % 10]) + '.' + 
         toLower(['Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis', 'Rodriguez', 'Martinez', 'Hernandez'][num % 10]) + 
         toString(num) + '@email.com',
  phone: ['212', '310', '404', '214', '305', '713', '480', '425', '718', '562'][num % 10] + '-555-' + 
         CASE WHEN (2000 + num) < 10000 THEN '0' + toString(2000 + num) ELSE toString(2000 + num) END,
  dateOfBirth: date('1970-01-01') + duration({days: (num * 127) % 8000}),
  ssn: 'XXX-XX-' + toString(1000 + num),
  address: toString(100 + num) + ' ' + ['Main Street', 'Oak Avenue', 'Park Drive', 'First Street', 'Second Avenue', 'Third Street', 'Fourth Avenue', 'Fifth Street'][num % 8],
  city: ['New York', 'Los Angeles', 'Atlanta', 'Dallas', 'Miami', 'Houston', 'Phoenix', 'Seattle', 'Brooklyn', 'Long Beach'][num % 10],
  state: ['NY', 'CA', 'GA', 'TX', 'FL', 'TX', 'AZ', 'WA', 'NY', 'CA'][num % 10],
  zipCode: ['10001', '90210', '30309', '75201', '33139', '77079', '85258', '98004', '11201', '90803'][num % 10],
  customerSince: date('2015-01-01') + duration({days: (num * 89) % 3000}),
  creditScore: 580 + (num % 250),
  riskProfile: ['Low', 'Medium', 'High'][num % 3],
  preferredContact: ['Email', 'Phone', 'Text'][num % 3],
  totalPremiums: 3000 + (num * 150),
  lifetimeValue: (3000 + (num * 150)) * (2 + (num % 10)),
  customerSegment: CASE 
    WHEN (3000 + (num * 150)) > 25000 THEN 'High Value'
    WHEN (3000 + (num * 150)) > 10000 THEN 'Standard'
    ELSE 'Basic' END,
  assignedBranch: ['BR001', 'BR002', 'BR003', 'BR004', 'BR005', 'BR006', 'BR007', 'BR008', 'BR009', 'BR010'][num % 10]
});

// ======================================================================
// PHASE 6: VEHICLES AND PROPERTIES (Expanded)
// ======================================================================

// Create Premium Vehicles for High-Value Customers
WITH [
  {vin: '1HGBH41JXMN109186', make: 'Mercedes-Benz', model: 'S-Class', year: 2023, value: 125000, custId: 'CUST001'},
  {vin: '2T1BURHE0JC014702', make: 'BMW', model: 'X7', year: 2022, value: 95000, custId: 'CUST001'},
  {vin: '1FTFW1ET5DFC10312', make: 'Porsche', model: 'Cayenne', year: 2023, value: 110000, custId: 'CUST002'},
  {vin: '5NPE34AF4HH012345', make: 'Tesla', model: 'Model S', year: 2023, value: 105000, custId: 'CUST002'},
  {vin: '1C4RJFAG8FC123456', make: 'Audi', model: 'Q8', year: 2022, value: 88000, custId: 'CUST003'},
  {vin: 'JM1BK32F781234567', make: 'Lexus', model: 'LX 600', year: 2023, value: 92000, custId: 'CUST004'},
  {vin: 'KNDJT2A15G7890123', make: 'Range Rover', model: 'Sport', year: 2022, value: 98000, custId: 'CUST005'}
] AS premiumVehicles
UNWIND premiumVehicles AS pVeh
CREATE (v:Vehicle:LuxuryVehicle {
  vin: pVeh.vin,
  make: pVeh.make,
  model: pVeh.model,
  year: pVeh.year,
  estimatedValue: pVeh.value,
  color: ['Black', 'White', 'Silver', 'Midnight Blue', 'Pearl White'][toInteger(rand() * 5)],
  mileage: toInteger(5000 + rand() * 15000),
  fuelType: CASE pVeh.make 
    WHEN 'Tesla' THEN 'Electric'
    WHEN 'BMW' THEN 'Hybrid'
    ELSE 'Premium Gasoline' END,
  customerId: pVeh.custId,
  vehicleClass: 'Luxury'
});

// Create Standard Vehicles (bulk creation - 250 vehicles)
WITH range(6, 120) AS vehicleNumbers
UNWIND vehicleNumbers AS num
CREATE (v:Vehicle {
  vin: toString(num) + 'ABC' + toString(1000000 + num) + 'XYZ',
  make: ['Honda', 'Toyota', 'Ford', 'Chevrolet', 'Nissan', 'Hyundai', 'Kia', 'Mazda', 'Subaru', 'Volkswagen'][num % 10],
  model: ['Civic', 'Corolla', 'F-150', 'Silverado', 'Altima', 'Elantra', 'Forte', 'CX-5', 'Outback', 'Jetta'][num % 10],
  year: 2015 + (num % 9),
  estimatedValue: 15000 + (num * 300),
  color: ['Black', 'White', 'Silver', 'Blue', 'Red', 'Gray', 'Green'][num % 7],
  mileage: toInteger(10000 + rand() * 80000),
  fuelType: ['Gasoline', 'Hybrid', 'Electric'][CASE WHEN num % 10 = 0 THEN 2 WHEN num % 5 = 0 THEN 1 ELSE 0 END],
  customerId: 'CUST' + CASE WHEN num < 100 THEN '0' + toString(num) ELSE toString(num) END,
  vehicleClass: 'Standard'
});

// Create Premium Properties
WITH [
  {propId: 'PROP001', type: 'Luxury Estate', value: 8500000, sqft: 12000, year: 2015, custId: 'CUST001'},
  {propId: 'PROP002', type: 'Penthouse Condominium', value: 12000000, sqft: 4500, year: 2018, custId: 'CUST002'},
  {propId: 'PROP003', type: 'Historic Mansion', value: 6800000, sqft: 9500, year: 1925, custId: 'CUST003'},
  {propId: 'PROP004', type: 'Modern Estate', value: 5200000, sqft: 8200, year: 2020, custId: 'CUST004'},
  {propId: 'PROP005', type: 'Waterfront Villa', value: 7500000, sqft: 7800, year: 2017, custId: 'CUST005'}
] AS premiumProperties
UNWIND premiumProperties AS pProp
CREATE (p:Property:LuxuryProperty {
  propertyId: pProp.propId,
  propertyType: pProp.type,
  estimatedValue: pProp.value,
  squareFootage: pProp.sqft,
  yearBuilt: pProp.year,
  bedrooms: toInteger(5 + rand() * 8),
  bathrooms: toInteger(6 + rand() * 6) + 0.5,
  hasPool: true,
  hasGarage: true,
  hasWinecellar: true,
  hasGym: true,
  roofType: ['Slate', 'Tile', 'Metal'][toInteger(rand() * 3)],
  heatingType: ['Radiant', 'Geothermal', 'High-efficiency Gas'][toInteger(rand() * 3)],
  customerId: pProp.custId,
  propertyClass: 'Luxury'
});

// Create Standard Properties (bulk creation)
WITH range(6, 150) AS propertyNumbers
UNWIND propertyNumbers AS num
CREATE (p:Property {
  propertyId: 'PROP' + CASE WHEN num < 100 THEN '0' + toString(num) ELSE toString(num) END,
  propertyType: ['Single Family Home', 'Condominium', 'Townhouse', 'Duplex'][num % 4],
  estimatedValue: 250000 + (num * 3000),
  squareFootage: 1200 + (num * 25),
  yearBuilt: 1980 + (num % 44),
  bedrooms: 2 + (num % 4),
  bathrooms: 1 + (num % 3) + 0.5 * (num % 2),
  hasPool: rand() > 0.8,
  hasGarage: rand() > 0.3,
  roofType: ['Shingle', 'Tile', 'Metal'][num % 3],
  heatingType: ['Gas', 'Electric', 'Oil'][num % 3],
  customerId: 'CUST' + CASE WHEN num < 100 THEN '0' + toString(num) ELSE toString(num) END,
  propertyClass: 'Standard'
});

// ======================================================================
// PHASE 7: COMPREHENSIVE INSURANCE POLICIES
// ======================================================================

// Create Auto Insurance Policies
WITH range(1, 80) AS policyNumbers
UNWIND policyNumbers AS num
CREATE (ap:Policy:AutoPolicy {
  policyNumber: 'AUTO' + CASE WHEN num < 100 THEN '0' + toString(num) ELSE toString(num) END,
  type: 'Auto',
  status: CASE WHEN rand() > 0.95 THEN 'Cancelled' WHEN rand() > 0.9 THEN 'Pending' ELSE 'Active' END,
  premium: 800 + (num * 50) + toInteger(rand() * 500),
  deductible: [250, 500, 1000, 2500][num % 4],
  effectiveDate: date('2023-01-01') + duration({days: (num * 15) % 365}),
  expirationDate: date('2024-01-01') + duration({days: (num * 15) % 365}),
  coverage: ['Liability', 'Collision', 'Comprehensive', 'Uninsured Motorist'],
  liabilityLimit: [50000, 100000, 250000, 500000][num % 4],
  collisionLimit: [25000, 50000, 100000][num % 3],
  comprehensiveLimit: [25000, 50000, 100000][num % 3],
  uninsuredMotoristLimit: [25000, 50000, 100000][num % 3],
  customerId: 'CUST' + CASE WHEN num < 100 THEN '0' + toString(num) ELSE toString(num) END,
  vehicleVin: CASE WHEN num <= 7 THEN ['1HGBH41JXMN109186', '2T1BURHE0JC014702', '1FTFW1ET5DFC10312', '5NPE34AF4HH012345', '1C4RJFAG8FC123456', 'JM1BK32F781234567', 'KNDJT2A15G7890123'][num - 1]
              ELSE toString(num) + 'ABC' + toString(1000000 + num) + 'XYZ' END,
  underwriterId: 'UW' + CASE WHEN (num % 15) + 1 < 10 THEN '0' + toString((num % 15) + 1) ELSE toString((num % 15) + 1) END
});

// Create Home Insurance Policies
WITH range(1, 60) AS policyNumbers
UNWIND policyNumbers AS num
CREATE (hp:Policy:HomePolicy {
  policyNumber: 'HOME' + CASE WHEN num < 100 THEN '0' + toString(num) ELSE toString(num) END,
  type: 'Home',
  status: CASE WHEN rand() > 0.95 THEN 'Cancelled' WHEN rand() > 0.9 THEN 'Pending' ELSE 'Active' END,
  premium: 1200 + (num * 100) + toInteger(rand() * 800),
  deductible: [1000, 2500, 5000, 10000][num % 4],
  effectiveDate: date('2023-01-01') + duration({days: (num * 18) % 365}),
  expirationDate: date('2024-01-01') + duration({days: (num * 18) % 365}),
  coverage: ['Dwelling', 'Personal Property', 'Liability', 'Medical Payments', 'Additional Living Expenses'],
  dwellingLimit: [300000, 500000, 750000, 1000000, 2000000][num % 5],
  personalPropertyLimit: [150000, 250000, 375000, 500000, 1000000][num % 5],
  liabilityLimit: [100000, 300000, 500000, 1000000][num % 4],
  medicalPaymentsLimit: [1000, 5000, 10000][num % 3],
  customerId: 'CUST' + CASE WHEN num < 100 THEN '0' + toString(num) ELSE toString(num) END,
  propertyId: 'PROP' + CASE WHEN num < 100 THEN '0' + toString(num) ELSE toString(num) END,
  underwriterId: 'UW' + CASE WHEN (num % 15) + 1 < 10 THEN '0' + toString((num % 15) + 1) ELSE toString((num % 15) + 1) END
});

// Create Life Insurance Policies
WITH range(1, 50) AS policyNumbers
UNWIND policyNumbers AS num
CREATE (lp:Policy:LifePolicy {
  policyNumber: 'LIFE' + CASE WHEN num < 100 THEN '0' + toString(num) ELSE toString(num) END,
  type: 'Life',
  status: CASE WHEN rand() > 0.92 THEN 'Lapsed' WHEN rand() > 0.88 THEN 'Pending' ELSE 'Active' END,
  premium: 500 + (num * 75) + toInteger(rand() * 1000),
  benefitAmount: [100000, 250000, 500000, 750000, 1000000, 2000000][num % 6],
  effectiveDate: date('2020-01-01') + duration({days: (num * 25) % 1200}),
  expirationDate: date('2040-01-01') + duration({days: (num * 25) % 1200}),
  policyType: ['Term', 'Whole Life', 'Universal', 'Variable'][num % 4],
  customerId: 'CUST' + CASE WHEN num < 100 THEN '0' + toString(num) ELSE toString(num) END,
  underwriterId: 'UW' + CASE WHEN (num % 15) + 1 < 10 THEN '0' + toString((num % 15) + 1) ELSE toString((num % 15) + 1) END
});

// Create Commercial Insurance Policies
WITH range(1, 25) AS policyNumbers
UNWIND policyNumbers AS num
CREATE (cp:Policy:CommercialPolicy {
  policyNumber: 'COMM' + CASE WHEN num < 100 THEN '0' + toString(num) ELSE toString(num) END,
  type: 'Commercial',
  status: CASE WHEN rand() > 0.9 THEN 'Pending' ELSE 'Active' END,
  premium: 5000 + (num * 500) + toInteger(rand() * 3000),
  deductible: [2500, 5000, 10000, 25000][num % 4],
  effectiveDate: date('2023-01-01') + duration({days: (num * 20) % 365}),
  expirationDate: date('2024-01-01') + duration({days: (num * 20) % 365}),
  coverage: ['General Liability', 'Property', 'Workers Compensation', 'Cyber Liability'],
  generalLiabilityLimit: [1000000, 2000000, 5000000][num % 3],
  propertyLimit: [500000, 1000000, 2000000][num % 3],
  customerId: 'CUST' + CASE WHEN num < 100 THEN '0' + toString(num) ELSE toString(num) END,
  underwriterId: 'UW' + CASE WHEN (num % 15) + 1 < 10 THEN '0' + toString((num % 15) + 1) ELSE toString((num % 15) + 1) END
});

// Create Umbrella Insurance Policies
WITH range(1, 20) AS policyNumbers
UNWIND policyNumbers AS num
CREATE (up:Policy:UmbrellaPolicy {
  policyNumber: 'UMB' + CASE WHEN num < 100 THEN '0' + toString(num) ELSE toString(num) END,
  type: 'Umbrella',
  status: 'Active',
  premium: 300 + (num * 50) + toInteger(rand() * 200),
  coverageLimit: [1000000, 2000000, 5000000, 10000000][num % 4],
  effectiveDate: date('2023-01-01') + duration({days: (num * 22) % 365}),
  expirationDate: date('2024-01-01') + duration({days: (num * 22) % 365}),
  customerId: 'CUST' + CASE WHEN num < 100 THEN '0' + toString(num) ELSE toString(num) END,
  underwriterId: 'UW' + CASE WHEN (num % 15) + 1 < 10 THEN '0' + toString((num % 15) + 1) ELSE toString((num % 15) + 1) END
});

// ======================================================================
// PHASE 8: CLAIMS AND INCIDENTS (Expanded)
// ======================================================================

// Create Auto Claims
WITH range(1, 35) AS claimNumbers
UNWIND claimNumbers AS num
CREATE (ac:Claim:AutoClaim {
  claimId: 'ACLAIM' + CASE WHEN num < 100 THEN '0' + toString(num) ELSE toString(num) END,
  claimType: 'Auto',
  incidentDate: date('2023-01-01') + duration({days: (num * 25) % 365}),
  reportedDate: date('2023-01-01') + duration({days: (num * 25) % 365}) + duration({days: toInteger(1 + rand() * 5)}),
  status: ['Settled', 'In Progress', 'Under Investigation', 'Denied', 'Reopened'][num % 5],
  claimAmount: 2000 + (num * 500) + toInteger(rand() * 8000),
  estimatedLoss: 2000 + (num * 500) + toInteger(rand() * 8000),
  description: ['Rear-end collision', 'Hit and run damage', 'Vandalism', 'Collision with deer', 'Hail damage', 'Theft', 'Fire damage', 'Flood damage'][num % 8],
  faultDetermination: ['At Fault', 'Not At Fault', 'Partial Fault'][num % 3],
  policyNumber: 'AUTO' + CASE WHEN num < 100 THEN '0' + toString(num) ELSE toString(num) END,
  adjusterId: 'ADJ' + CASE WHEN (num % 10) + 1 < 10 THEN '0' + toString((num % 10) + 1) ELSE toString((num % 10) + 1) END
});

// Create Home Claims
WITH range(1, 25) AS claimNumbers
UNWIND claimNumbers AS num
CREATE (hc:Claim:HomeClaim {
  claimId: 'HCLAIM' + CASE WHEN num < 100 THEN '0' + toString(num) ELSE toString(num) END,
  claimType: 'Home',
  incidentDate: date('2023-01-01') + duration({days: (num * 35) % 365}),
  reportedDate: date('2023-01-01') + duration({days: (num * 35) % 365}) + duration({days: toInteger(1 + rand() * 7)}),
  status: ['Settled', 'In Progress', 'Under Investigation', 'Denied'][num % 4],
  claimAmount: 5000 + (num * 1000) + toInteger(rand() * 15000),
  estimatedLoss: 5000 + (num * 1000) + toInteger(rand() * 15000),
  description: ['Water damage from burst pipe', 'Fire damage', 'Storm damage', 'Theft', 'Lightning strike', 'Wind damage', 'Smoke damage', 'Vandalism'][num % 8],
  policyNumber: 'HOME' + CASE WHEN num < 100 THEN '0' + toString(num) ELSE toString(num) END,
  adjusterId: 'ADJ' + CASE WHEN (num % 10) + 1 < 10 THEN '0' + toString((num % 10) + 1) ELSE toString((num % 10) + 1) END
});

// Create Life Claims
WITH range(1, 8) AS claimNumbers
UNWIND claimNumbers AS num
CREATE (lc:Claim:LifeClaim {
  claimId: 'LCLAIM' + CASE WHEN num < 10 THEN '0' + toString(num) ELSE toString(num) END,
  claimType: 'Life',
  incidentDate: date('2023-01-01') + duration({days: (num * 45) % 365}),
  reportedDate: date('2023-01-01') + duration({days: (num * 45) % 365}) + duration({days: toInteger(2 + rand() * 10)}),
  status: ['Settled', 'In Progress', 'Under Investigation'][num % 3],
  claimAmount: [100000, 250000, 500000, 750000, 1000000][num % 5],
  beneficiaryName: ['Spouse', 'Child', 'Trust', 'Estate'][num % 4],
  causeOfDeath: ['Natural', 'Accident', 'Illness'][num % 3],
  policyNumber: 'LIFE' + CASE WHEN num < 100 THEN '0' + toString(num) ELSE toString(num) END,
  adjusterId: 'ADJ' + CASE WHEN (num % 10) + 1 < 10 THEN '0' + toString((num % 10) + 1) ELSE toString((num % 10) + 1) END
});

// ======================================================================
// PHASE 9: PAYMENTS AND FINANCIAL TRANSACTIONS
// ======================================================================

// Create Claim Payments
WITH range(1, 45) AS paymentNumbers
UNWIND paymentNumbers AS num
CREATE (payment:Payment:ClaimPayment {
  paymentId: 'PAY' + CASE WHEN num < 1000 THEN '0' + toString(num) ELSE toString(num) END,
  paymentType: 'Claim Payment',
  paymentAmount: 1500 + (num * 400) + toInteger(rand() * 5000),
  paymentDate: date('2023-02-01') + duration({days: (num * 20) % 300}),
  paymentMethod: ['Check', 'ACH Transfer', 'Wire Transfer'][num % 3],
  paymentStatus: ['Processed', 'Pending', 'Cleared'][num % 3],
  claimId: CASE 
    WHEN num <= 35 THEN 'ACLAIM' + CASE WHEN num < 100 THEN '0' + toString(num) ELSE toString(num) END
    WHEN num <= 60 THEN 'HCLAIM' + CASE WHEN (num - 35) < 100 THEN '0' + toString(num - 35) ELSE toString(num - 35) END
    ELSE 'LCLAIM' + CASE WHEN (num - 60) < 10 THEN '0' + toString(num - 60) ELSE toString(num - 60) END
  END,
  checkNumber: CASE WHEN num % 3 = 0 THEN toString(100000 + num) ELSE null END
});

// Create Premium Payments
WITH range(1, 150) AS paymentNumbers
UNWIND paymentNumbers AS num
CREATE (payment:Payment:PremiumPayment {
  paymentId: 'PREM' + CASE WHEN num < 1000 THEN '0' + toString(num) ELSE toString(num) END,
  paymentType: 'Premium Payment',
  paymentAmount: 200 + (num * 50) + toInteger(rand() * 800),
  paymentDate: date('2023-01-01') + duration({days: (num * 8) % 365}),
  paymentMethod: ['Credit Card', 'ACH Transfer', 'Check', 'Auto Pay'][num % 4],
  paymentStatus: ['Processed', 'Pending', 'Failed', 'Refunded'][CASE WHEN rand() > 0.95 THEN 3 WHEN rand() > 0.9 THEN 2 WHEN rand() > 0.8 THEN 1 ELSE 0 END],
  policyNumber: CASE 
    WHEN num <= 80 THEN 'AUTO' + CASE WHEN num < 100 THEN '0' + toString(num) ELSE toString(num) END
    WHEN num <= 140 THEN 'HOME' + CASE WHEN (num - 80) < 100 THEN '0' + toString(num - 80) ELSE toString(num - 80) END
    ELSE 'LIFE' + CASE WHEN (num - 140) < 100 THEN '0' + toString(num - 140) ELSE toString(num - 140) END
  END,
  customerId: 'CUST' + CASE WHEN num < 100 THEN '0' + toString(num) ELSE toString(num) END
});

// ======================================================================
// PHASE 10: VENDORS AND SERVICE PROVIDERS
// ======================================================================

// Create Repair Shops
WITH [
  {shopId: 'SHOP001', name: 'Premier Auto Body', address: '1847 Industrial Blvd', city: 'Chicago', state: 'IL', phone: '312-555-7001', certs: ['I-CAR', 'ASE'], avgTime: 7},
  {shopId: 'SHOP002', name: 'Metro Collision Center', address: '456 Broadway', city: 'New York', state: 'NY', phone: '212-555-7002', certs: ['I-CAR'], avgTime: 5},
  {shopId: 'SHOP003', name: 'West Coast Auto Repair', address: '789 Sunset Blvd', city: 'Los Angeles', state: 'CA', phone: '310-555-7003', certs: ['ASE', 'I-CAR'], avgTime: 6},
  {shopId: 'SHOP004', name: 'Lone Star Body Shop', address: '2100 Commerce Street', city: 'Dallas', state: 'TX', phone: '214-555-7004', certs: ['I-CAR'], avgTime: 8},
  {shopId: 'SHOP005', name: 'South Beach Collision', address: '1500 Ocean Drive', city: 'Miami', state: 'FL', phone: '305-555-7005', certs: ['ASE'], avgTime: 7}
] AS shopData
UNWIND shopData AS sData
CREATE (shop:RepairShop {
  shopId: sData.shopId,
  name: sData.name,
  address: sData.address,
  city: sData.city,
  state: sData.state,
  phone: sData.phone,
  certifications: sData.certs,
  preferredVendor: true,
  avgRepairTime: sData.avgTime,
  rating: 4.0 + rand() * 1.0
});

// Create Contractors
WITH [
  {contractorId: 'CONT001', name: 'HomeFix Restoration', address: '789 Service Road', city: 'Chicago', state: 'IL', phone: '312-555-8001', specialties: ['Water Damage', 'Fire Restoration'], rating: 4.8},
  {contractorId: 'CONT002', name: 'Emergency Home Services', address: '567 Repair Avenue', city: 'New York', state: 'NY', phone: '212-555-8002', specialties: ['Storm Damage', 'Roofing'], rating: 4.6},
  {contractorId: 'CONT003', name: 'Pacific Restoration', address: '890 Renovation Drive', city: 'Los Angeles', state: 'CA', phone: '310-555-8003', specialties: ['Earthquake Damage', 'Structural'], rating: 4.7},
  {contractorId: 'CONT004', name: 'Tornado Alley Repair', address: '432 Storm Street', city: 'Dallas', state: 'TX', phone: '214-555-8004', specialties: ['Wind Damage', 'Hail Damage'], rating: 4.5}
] AS contractorData
UNWIND contractorData AS cData
CREATE (contractor:Contractor {
  contractorId: cData.contractorId,
  name: cData.name,
  address: cData.address,
  city: cData.city,
  state: cData.state,
  phone: cData.phone,
  specialties: cData.specialties,
  rating: cData.rating,
  preferredVendor: true
});

// Create Adjusters
WITH range(1, 12) AS adjusterNumbers
UNWIND adjusterNumbers AS num
CREATE (adjuster:Adjuster {
  adjusterId: 'ADJ' + CASE WHEN num < 10 THEN '0' + toString(num) ELSE toString(num) END,
  firstName: ['Robert', 'Susan', 'Michael', 'Linda', 'David', 'Patricia', 'James', 'Barbara', 'John', 'Elizabeth', 'William', 'Jennifer'][num - 1],
  lastName: ['Johnson', 'Smith', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis', 'Rodriguez', 'Martinez', 'Hernandez', 'Lopez'][num - 1],
  email: toLower(['Robert', 'Susan', 'Michael', 'Linda', 'David', 'Patricia', 'James', 'Barbara', 'John', 'Elizabeth', 'William', 'Jennifer'][num - 1]) + '.' + 
         toLower(['Johnson', 'Smith', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis', 'Rodriguez', 'Martinez', 'Hernandez', 'Lopez'][num - 1]) + 
         '@securelife.com',
  phone: '312-555-' + toString(3000 + num),
  licenseNumber: 'ADJ-' + toString(10000 + num),
  specialization: ['Auto Claims', 'Property Claims', 'Liability Claims', 'Life Claims'][num % 4],
  hireDate: date('2018-01-01') + duration({days: (num * 90) % 1500}),
  caseLoad: 25 + (num * 5),
  yearsExperience: 3 + (num % 15)
});

// ======================================================================
// PHASE 11: COMPREHENSIVE RELATIONSHIP CREATION
// ======================================================================

// Connect Corporate Hierarchy
MATCH (corporate:CorporateOffice), (homeOffice:HomeOffice)
CREATE (corporate)-[:OVERSEES {
  relationship: 'Corporate to Operations',
  establishedDate: date('1987-06-20')
}]->(homeOffice);

MATCH (corporate:CorporateOffice), (rhq:RegionalHeadquarters)
CREATE (corporate)-[:MANAGES {
  relationship: 'Corporate to Regional',
  establishedDate: rhq.established,
  reportingStructure: 'Direct'
}]->(rhq);

MATCH (rhq:RegionalHeadquarters), (b:Branch)
WHERE (rhq.region = 'Northeast' AND b.state IN ['NY']) OR
      (rhq.region = 'West' AND b.state IN ['CA', 'AZ', 'WA']) OR
      (rhq.region = 'Southeast' AND b.state IN ['GA', 'FL'])
CREATE (rhq)-[:SUPERVISES {
  relationship: 'Regional to Branch',
  reportingFrequency: 'Monthly'
}]->(b);

// Connect Agents to Branches
MATCH (a:Agent), (b:Branch)
WHERE a.branchCode = b.branchCode
CREATE (a)-[:WORKS_AT {
  startDate: a.hireDate,
  position: CASE 
    WHEN a:BranchManager THEN 'Branch Manager'
    WHEN a:RegionalManager THEN 'Regional Manager'
    WHEN a:CEO OR a:COO OR a:CFO THEN 'Executive'
    ELSE 'Sales Agent' END,
  employeeId: a.agentId
}]->(b);

// Connect Customers to Agents (Territory-based assignment)
MATCH (c:Customer), (a:SalesAgent)
WHERE c.assignedBranch = a.branchCode
WITH c, a
ORDER BY rand()
WITH c, collect(a)[0] AS assignedAgent
WHERE assignedAgent IS NOT NULL
CREATE (assignedAgent)-[:SERVES {
  relationshipStart: c.customerSince,
  clientType: c.customerSegment,
  lastContact: date('2023-01-01') + duration({days: toInteger(rand() * 300)}),
  contactFrequency: CASE c.customerSegment
    WHEN 'Ultra High Net Worth' THEN 'Weekly'
    WHEN 'High Net Worth' THEN 'Bi-weekly'
    WHEN 'High Value' THEN 'Monthly'
    ELSE 'Quarterly' END
}]->(c);

// Connect Customers to Branches
MATCH (c:Customer), (b:Branch)
WHERE c.assignedBranch = b.branchCode
CREATE (c)-[:ASSIGNED_TO {
  assignmentDate: c.customerSince,
  branchType: 'Primary'
}]->(b);

// Connect Customers to Vehicles
MATCH (c:Customer), (v:Vehicle)
WHERE c.customerId = v.customerId
CREATE (c)-[:OWNS {
  purchaseDate: date('2018-01-01') + duration({days: toInteger(rand() * 1500)}),
  primaryDriver: true,
  ownershipType: 'Individual'
}]->(v);

// Connect Customers to Properties
MATCH (c:Customer), (p:Property)
WHERE c.customerId = p.customerId
CREATE (c)-[:OWNS {
  purchaseDate: date('2015-01-01') + duration({days: toInteger(rand() * 2500)}),
  ownershipType: 'Fee Simple',
  primaryResidence: true
}]->(p);

// Connect Policies to Customers
MATCH (c:Customer), (pol:Policy)
WHERE c.customerId = pol.customerId
CREATE (c)-[:HAS_POLICY {
  activationDate: pol.effectiveDate,
  paymentMethod: ['Auto Pay', 'Monthly Bill', 'Annual', 'Quarterly'][toInteger(rand() * 4)],
  renewals: toInteger(1 + rand() * 5),
  policyStatus: pol.status
}]->(pol);

// Connect Policies to Underwriters
MATCH (pol:Policy), (uw:Underwriter)
WHERE pol.underwriterId = uw.underwriterId
CREATE (uw)-[:UNDERWROTE {
  underwritingDate: pol.effectiveDate - duration({days: toInteger(5 + rand() * 15)}),
  riskAssessment: ['Low', 'Medium', 'High'][toInteger(rand() * 3)],
  approvalStatus: 'Approved'
}]->(pol);

// Connect Auto Policies to Vehicles
MATCH (ap:AutoPolicy), (v:Vehicle)
WHERE ap.vehicleVin = v.vin
CREATE (ap)-[:COVERS {
  coverageStart: ap.effectiveDate,
  primaryVehicle: true,
  coverageType: 'Full Coverage'
}]->(v);

// Connect Home Policies to Properties
MATCH (hp:HomePolicy), (p:Property)
WHERE hp.propertyId = p.propertyId
CREATE (hp)-[:COVERS {
  coverageStart: hp.effectiveDate,
  dwelling: true,
  coverageType: 'Comprehensive'
}]->(p);

// Connect Claims to Policies
MATCH (cl:Claim), (pol:Policy)
WHERE cl.policyNumber = pol.policyNumber
CREATE (cl)-[:FILED_AGAINST {
  filingDate: cl.reportedDate,
  policyStatus: 'Active',
  claimType: cl.claimType
}]->(pol);

// Connect Claims to Customers through Policies
MATCH (cl:Claim)-[:FILED_AGAINST]->(pol:Policy)<-[:HAS_POLICY]-(c:Customer)
CREATE (c)-[:FILED_CLAIM {
  claimDate: cl.incidentDate,
  notification: cl.reportedDate,
  claimAmount: cl.claimAmount
}]->(cl);

// Connect Claims to Adjusters
MATCH (cl:Claim), (adj:Adjuster)
WHERE cl.adjusterId = adj.adjusterId
CREATE (adj)-[:ASSIGNED_TO {
  assignmentDate: cl.reportedDate + duration({days: 1}),
  caseStatus: cl.status,
  priority: CASE 
    WHEN cl.claimAmount > 50000 THEN 'High'
    WHEN cl.claimAmount > 10000 THEN 'Medium'
    ELSE 'Low' END
}]->(cl);

// Connect Auto Claims to Repair Shops
MATCH (ac:AutoClaim), (shop:RepairShop)
WHERE ac.status IN ['Settled', 'In Progress'] AND 
      ((ac.claimId IN ['ACLAIM001', 'ACLAIM005', 'ACLAIM010'] AND shop.shopId = 'SHOP001') OR
       (ac.claimId IN ['ACLAIM002', 'ACLAIM007'] AND shop.shopId = 'SHOP002') OR
       (ac.claimId IN ['ACLAIM003', 'ACLAIM008'] AND shop.shopId = 'SHOP003') OR
       (ac.claimId IN ['ACLAIM004', 'ACLAIM009'] AND shop.shopId = 'SHOP004') OR
       (ac.claimId = 'ACLAIM006' AND shop.shopId = 'SHOP005'))
CREATE (ac)-[:REPAIRED_BY {
  assignmentDate: ac.reportedDate + duration({days: 2}),
  estimatedCompletion: ac.reportedDate + duration({days: shop.avgRepairTime}),
  workType: 'Collision Repair',
  estimatedCost: ac.claimAmount * 0.8
}]->(shop);

// Connect Home Claims to Contractors
MATCH (hc:HomeClaim), (contractor:Contractor)
WHERE hc.status IN ['Settled', 'In Progress'] AND 
      ((hc.claimId IN ['HCLAIM001', 'HCLAIM006'] AND contractor.contractorId = 'CONT001') OR
       (hc.claimId IN ['HCLAIM002', 'HCLAIM007'] AND contractor.contractorId = 'CONT002') OR
       (hc.claimId IN ['HCLAIM003', 'HCLAIM008'] AND contractor.contractorId = 'CONT003') OR
       (hc.claimId IN ['HCLAIM004', 'HCLAIM009'] AND contractor.contractorId = 'CONT004'))
CREATE (hc)-[:REPAIRED_BY {
  assignmentDate: hc.reportedDate + duration({days: 3}),
  estimatedCompletion: hc.reportedDate + duration({days: 14}),
  workType: 'Property Restoration',
  estimatedCost: hc.claimAmount * 0.75
}]->(contractor);

// Connect Claim Payments to Claims
MATCH (payment:ClaimPayment), (cl:Claim)
WHERE payment.claimId = cl.claimId
CREATE (payment)-[:PAYS_CLAIM {
  paymentDate: payment.paymentDate,
  paymentAmount: payment.paymentAmount,
  paymentType: payment.paymentType
}]->(cl);

// Connect Premium Payments to Policies
MATCH (payment:PremiumPayment), (pol:Policy)
WHERE payment.policyNumber = pol.policyNumber
CREATE (payment)-[:PAYS_PREMIUM {
  paymentDate: payment.paymentDate,
  paymentAmount: payment.paymentAmount,
  paymentType: payment.paymentType
}]->(pol);

// Connect Premium Payments to Customers
MATCH (payment:PremiumPayment), (c:Customer)
WHERE payment.customerId = c.customerId
CREATE (c)-[:MADE_PAYMENT {
  paymentDate: payment.paymentDate,
  paymentAmount: payment.paymentAmount,
  paymentMethod: payment.paymentMethod
}]->(payment);

// ======================================================================
// PHASE 12: BUSINESS INTELLIGENCE RELATIONSHIPS
// ======================================================================

// Create Customer Referral Network
MATCH (c1:Customer), (c2:Customer)
WHERE c1.customerId < c2.customerId AND 
      c1.city = c2.city AND 
      rand() < 0.05  // 5% chance of referral relationship
CREATE (c1)-[:REFERRED {
  referralDate: date('2020-01-01') + duration({days: toInteger(rand() * 1000)}),
  referralBonus: 100,
  status: 'Successful'
}]->(c2);

// Create Agent Mentorship Relationships
MATCH (senior:Agent), (junior:Agent)
WHERE senior.yearsExperience > junior.yearsExperience + 5 AND
      senior.branchCode = junior.branchCode AND
      senior:SalesAgent AND junior:SalesAgent AND
      rand() < 0.3  // 30% chance of mentorship
CREATE (senior)-[:MENTORS {
  mentorshipStart: junior.hireDate + duration({days: 30}),
  mentorshipType: 'Sales Training',
  active: true
}]->(junior);

// Create Customer Service History
MATCH (c:Customer), (a:SalesAgent)-[:SERVES]->(c)
WITH c, a
CREATE (c)-[:SERVICE_HISTORY {
  lastServiceCall: date('2023-01-01') + duration({days: toInteger(rand() * 300)}),
  serviceType: ['Policy Review', 'Claim Inquiry', 'Payment Question', 'Coverage Change'][toInteger(rand() * 4)],
  satisfactionRating: 3 + toInteger(rand() * 3),  // 3-5 star rating
  resolved: rand() > 0.1  // 90% resolution rate
}]->(a);

// Create Cross-Selling Opportunities
MATCH (c:Customer)-[:HAS_POLICY]->(p:Policy)
WITH c, count(p) AS policyCount, collect(p.type) AS policyTypes
WHERE policyCount = 1
CREATE (c)-[:CROSS_SELL_OPPORTUNITY {
  identifiedDate: date('2023-01-01') + duration({days: toInteger(rand() * 300)}),
  recommendedProducts: CASE 
    WHEN 'Auto' IN policyTypes THEN ['Home', 'Umbrella']
    WHEN 'Home' IN policyTypes THEN ['Auto', 'Umbrella']
    WHEN 'Life' IN policyTypes THEN ['Auto', 'Home']
    ELSE ['Life', 'Umbrella'] END,
  priority: CASE 
    WHEN c.lifetimeValue > 100000 THEN 'High'
    WHEN c.lifetimeValue > 50000 THEN 'Medium'
    ELSE 'Low' END,
  contacted: rand() > 0.5
}]->(c);

// ======================================================================
// PHASE 13: REPORTING AND ANALYTICS NODES
// ======================================================================

// Create Monthly Performance Reports
WITH range(1, 12) AS months
UNWIND months AS month
CREATE (report:Report:MonthlyReport {
  reportId: 'RPT2023' + CASE WHEN month < 10 THEN '0' + toString(month) ELSE toString(month) END,
  reportType: 'Monthly Performance',
  reportMonth: month,
  reportYear: 2023,
  generatedDate: date('2023-' + CASE WHEN month < 10 THEN '0' + toString(month) ELSE toString(month) END + '-01') + duration({days: 32}),
  totalPremiums: toInteger(5000000 + rand() * 2000000),
  totalClaims: toInteger(800000 + rand() * 400000),
  newCustomers: toInteger(150 + rand() * 100),
  lostCustomers: toInteger(20 + rand() * 30),
  profitMargin: 0.15 + rand() * 0.1
});

// Create Risk Assessment Categories
WITH ['Low Risk Pool', 'Medium Risk Pool', 'High Risk Pool', 'Catastrophic Risk Pool'] AS riskCategories
UNWIND riskCategories AS category
CREATE (risk:RiskCategory {
  categoryName: category,
  riskLevel: CASE category
    WHEN 'Low Risk Pool' THEN 1
    WHEN 'Medium Risk Pool' THEN 2
    WHEN 'High Risk Pool' THEN 3
    ELSE 4 END,
  baseRate: CASE category
    WHEN 'Low Risk Pool' THEN 0.8
    WHEN 'Medium Risk Pool' THEN 1.0
    WHEN 'High Risk Pool' THEN 1.5
    ELSE 2.5 END,
  description: category + ' customers based on claims history and risk factors'
});

// Connect Customers to Risk Categories
MATCH (c:Customer), (risk:RiskCategory)
WHERE (c.riskProfile = 'Low' AND risk.categoryName = 'Low Risk Pool') OR
      (c.riskProfile = 'Medium' AND risk.categoryName = 'Medium Risk Pool') OR
      (c.riskProfile = 'High' AND risk.categoryName = 'High Risk Pool')
CREATE (c)-[:CATEGORIZED_AS {
  assignmentDate: date('2023-01-01'),
  reviewDate: date('2023-12-31'),
  riskFactors: ['Claims History', 'Credit Score', 'Demographics'],
  lastReview: date('2023-06-01') + duration({days: toInteger(rand() * 180)})
}]->(risk);

// ======================================================================
// PHASE 14: COMPLIANCE AND AUDIT RELATIONSHIPS
// ======================================================================

// Create Audit Trail for High-Value Transactions
MATCH (payment:Payment)
WHERE payment.paymentAmount > 10000
CREATE (audit:AuditLog {
  auditId: 'AUDIT' + payment.paymentId,
  transactionId: payment.paymentId,
  auditDate: payment.paymentDate + duration({days: 1}),
  auditType: 'High Value Transaction Review',
  auditorId: 'AUDITOR001',
  complianceStatus: 'Approved',
  notes: 'High value payment reviewed and approved per company policy'
})
CREATE (payment)-[:AUDITED_BY {
  auditDate: audit.auditDate,
  auditResult: 'Clean',
  followUpRequired: false
}]->(audit);

// Create Regulatory Compliance Tracking
MATCH (pol:Policy)
WHERE pol.type IN ['Life', 'Commercial']
CREATE (compliance:ComplianceRecord {
  complianceId: 'COMP' + pol.policyNumber,
  policyNumber: pol.policyNumber,
  regulatoryRequirements: ['State Insurance Code', 'Federal Guidelines'],
  lastComplianceCheck: date('2023-01-01') + duration({days: toInteger(rand() * 300)}),
  complianceStatus: 'Compliant',
  nextReviewDate: date('2024-01-01') + duration({days: toInteger(rand() * 365)}),
  complianceOfficer: 'OFFICER001'
})
CREATE (pol)-[:COMPLIES_WITH {
  complianceDate: compliance.lastComplianceCheck,
  requirementsMet: true,
  documentationComplete: true
}]->(compliance);

// ======================================================================
// PHASE 15: FINAL STATISTICS AND VERIFICATION
// ======================================================================

// Return comprehensive database statistics
MATCH (n) 
RETURN labels(n)[0] AS entityType, count(n) AS entityCount
ORDER BY entityCount DESC

UNION

MATCH ()-[r]->()
RETURN type(r) AS entityType, count(r) AS entityCount
ORDER BY entityCount DESC;

// Final verification queries
MATCH (c:Customer)-[:HAS_POLICY]->(p:Policy)
WITH count(c) AS totalCustomers, count(p) AS totalPolicies
MATCH (cl:Claim)
WITH totalCustomers, totalPolicies, count(cl) AS totalClaims
MATCH (pay:Payment)
WITH totalCustomers, totalPolicies, totalClaims, count(pay) AS totalPayments
MATCH (a:Agent)
WITH totalCustomers, totalPolicies, totalClaims, totalPayments, count(a) AS totalAgents
MATCH (b:Branch)
RETURN 
  '🏢 COMPREHENSIVE INSURANCE DATABASE CREATED' AS status,
  datetime() AS completionTime,
  totalCustomers AS customers,
  totalPolicies AS policies,
  totalClaims AS claims,
  totalPayments AS payments,
  totalAgents AS agents,
  count(b) AS branches,
  '✓ Multi-tier organizational structure' AS structure,
  '✓ Complete customer lifecycle management' AS lifecycle,
  '✓ Comprehensive policy and claims processing' AS processing,
  '✓ Financial transaction tracking' AS financial,
  '✓ Vendor and service provider network' AS vendors,
  '✓ Business intelligence and analytics' AS analytics,
  '✓ Compliance and audit capabilities' AS compliance,
  '✓ 1000+ entities with rich relationships' AS scale;