// ======================================================================
// INSURANCE COMPANY DATABASE CREATION SCRIPT
// Neo4j Enterprise 2025.06.0 Compatible
// Container: neo4j
// Lab Foundation: Advanced Cypher for Insurance Domain
// Assumes insurance database already exists
// ======================================================================

// ======================================================================
// PHASE 0: DATABASE INITIALIZATION
// ======================================================================

// Switch to the insurance database
:use insurance;

// ======================================================================
// PHASE 1: DATABASE CLEANUP AND VERIFICATION
// ======================================================================

// Check current database state (should be 0 for new database)
MATCH (n) RETURN count(n) AS nodes_before_cleanup;

// For a new database, there should be no existing constraints or data
// But we'll check anyway for safety

// Show existing constraints (should be empty for new database)
SHOW CONSTRAINTS;

// Show existing indexes (should be empty for new database)  
SHOW INDEXES;

// Verify database is empty (should return 0 for new database)
MATCH (n) RETURN count(n) AS remaining_nodes;

// ======================================================================
// PHASE 2: SCHEMA CREATION (CONSTRAINTS AND INDEXES)
// ======================================================================

// Create uniqueness constraints for data integrity
CREATE CONSTRAINT customer_id_unique FOR (c:Customer) REQUIRE c.customerId IS UNIQUE;
CREATE CONSTRAINT policy_number_unique FOR (p:Policy) REQUIRE p.policyNumber IS UNIQUE;
CREATE CONSTRAINT claim_id_unique FOR (cl:Claim) REQUIRE cl.claimId IS UNIQUE;
CREATE CONSTRAINT agent_id_unique FOR (a:Agent) REQUIRE a.agentId IS UNIQUE;
CREATE CONSTRAINT branch_code_unique FOR (b:Branch) REQUIRE b.branchCode IS UNIQUE;
CREATE CONSTRAINT vehicle_vin_unique FOR (v:Vehicle) REQUIRE v.vin IS UNIQUE;
CREATE CONSTRAINT property_id_unique FOR (pr:Property) REQUIRE pr.propertyId IS UNIQUE;

// Create performance indexes
CREATE INDEX customer_email_index FOR (c:Customer) ON (c.email);
CREATE INDEX customer_phone_index FOR (c:Customer) ON (c.phone);
CREATE INDEX policy_status_index FOR (p:Policy) ON (p.status);
CREATE INDEX policy_type_index FOR (p:Policy) ON (p.type);
CREATE INDEX claim_status_index FOR (cl:Claim) ON (cl.status);
CREATE INDEX claim_date_index FOR (cl:Claim) ON (cl.incidentDate);
CREATE INDEX agent_territory_index FOR (a:Agent) ON (a.territory);
CREATE INDEX branch_region_index FOR (b:Branch) ON (b.region);

// ======================================================================
// PHASE 3: BRANCH AND ORGANIZATIONAL STRUCTURE
// ======================================================================

// Create regional branches
CREATE (hq:Branch:HeadQuarters {
  branchCode: 'HQ001',
  name: 'SecureLife Insurance Headquarters',
  address: '1500 Insurance Plaza',
  city: 'Chicago',
  state: 'IL',
  zipCode: '60601',
  phone: '312-555-0001',
  region: 'Central',
  established: date('1987-03-15'),
  employees: 450,
  isHeadquarters: true
})

CREATE (branch_ny:Branch {
  branchCode: 'NY001',
  name: 'SecureLife New York Metropolitan',
  address: '785 Fifth Avenue',
  city: 'New York',
  state: 'NY',
  zipCode: '10022',
  phone: '212-555-0002',
  region: 'Northeast',
  established: date('1992-08-20'),
  employees: 125
})

CREATE (branch_ca:Branch {
  branchCode: 'CA001',
  name: 'SecureLife Los Angeles',
  address: '9900 Wilshire Boulevard',
  city: 'Los Angeles',
  state: 'CA',
  zipCode: '90210',
  phone: '310-555-0003',
  region: 'West',
  established: date('1995-11-10'),
  employees: 98
})

CREATE (branch_tx:Branch {
  branchCode: 'TX001',
  name: 'SecureLife Dallas',
  address: '2001 Ross Avenue',
  city: 'Dallas',
  state: 'TX',
  zipCode: '75201',
  phone: '214-555-0004',
  region: 'South',
  established: date('1998-05-30'),
  employees: 87
})

CREATE (branch_fl:Branch {
  branchCode: 'FL001',
  name: 'SecureLife Miami',
  address: '1428 Brickell Avenue',
  city: 'Miami',
  state: 'FL',
  zipCode: '33131',
  phone: '305-555-0005',
  region: 'Southeast',
  established: date('2001-02-14'),
  employees: 76
})

CREATE (branch_ga:Branch {
  branchCode: 'GA001',
  name: 'SecureLife Atlanta',
  address: '3384 Peachtree Road',
  city: 'Atlanta',
  state: 'GA',
  zipCode: '30326',
  phone: '404-555-0006',
  region: 'Southeast',
  established: date('2003-09-12'),
  employees: 65
});

// ======================================================================
// PHASE 4: AGENTS AND STAFF CREATION
// ======================================================================

// Create senior management and agents
CREATE (agent1:Agent:Manager {
  agentId: 'AGT001',
  firstName: 'Robert',
  lastName: 'Anderson',
  email: 'r.anderson@securelife.com',
  phone: '312-555-1001',
  licenseNumber: 'IL-2847593',
  hireDate: date('2010-03-15'),
  territory: 'Chicago Metro',
  specialization: ['Auto', 'Home', 'Life'],
  commissionRate: 0.08,
  salesTarget: 2500000,
  managerLevel: 'Senior',
  yearsExperience: 15
})

CREATE (agent2:Agent {
  agentId: 'AGT002',
  firstName: 'Sarah',
  lastName: 'Johnson',
  email: 's.johnson@securelife.com',
  phone: '212-555-1002',
  licenseNumber: 'NY-1847293',
  hireDate: date('2015-07-20'),
  territory: 'Manhattan',
  specialization: ['Auto', 'Umbrella'],
  commissionRate: 0.06,
  salesTarget: 1800000,
  yearsExperience: 9
})

CREATE (agent3:Agent {
  agentId: 'AGT003',
  firstName: 'Michael',
  lastName: 'Davis',
  email: 'm.davis@securelife.com',
  phone: '310-555-1003',
  licenseNumber: 'CA-9847562',
  hireDate: date('2012-11-08'),
  territory: 'Los Angeles County',
  specialization: ['Home', 'Condo', 'Earthquake'],
  commissionRate: 0.07,
  salesTarget: 2200000,
  yearsExperience: 12
})

CREATE (agent4:Agent {
  agentId: 'AGT004',
  firstName: 'Emily',
  lastName: 'Wilson',
  email: 'e.wilson@securelife.com',
  phone: '214-555-1004',
  licenseNumber: 'TX-4847293',
  hireDate: date('2018-04-12'),
  territory: 'Dallas-Fort Worth',
  specialization: ['Auto', 'Commercial'],
  commissionRate: 0.055,
  salesTarget: 1600000,
  yearsExperience: 6
})

CREATE (agent5:Agent {
  agentId: 'AGT005',
  firstName: 'David',
  lastName: 'Brown',
  email: 'd.brown@securelife.com',
  phone: '305-555-1005',
  licenseNumber: 'FL-7847291',
  hireDate: date('2016-09-25'),
  territory: 'Miami-Dade',
  specialization: ['Hurricane', 'Flood', 'Home'],
  commissionRate: 0.065,
  salesTarget: 1900000,
  yearsExperience: 8
})

CREATE (agent6:Agent {
  agentId: 'AGT006',
  firstName: 'Jennifer',
  lastName: 'Taylor',
  email: 'j.taylor@securelife.com',
  phone: '404-555-1006',
  licenseNumber: 'GA-3847294',
  hireDate: date('2019-01-18'),
  territory: 'Atlanta Metro',
  specialization: ['Life', 'Health', 'Disability'],
  commissionRate: 0.05,
  salesTarget: 1400000,
  yearsExperience: 5
})

CREATE (agent7:Agent {
  agentId: 'AGT007',
  firstName: 'Christopher',
  lastName: 'Martinez',
  email: 'c.martinez@securelife.com',
  phone: '312-555-1007',
  licenseNumber: 'IL-8847295',
  hireDate: date('2020-06-30'),
  territory: 'Chicago South',
  specialization: ['Auto', 'Renters'],
  commissionRate: 0.045,
  salesTarget: 1200000,
  yearsExperience: 4
});

// ======================================================================
// PHASE 5: CUSTOMER CREATION (150+ customers)
// ======================================================================

// High-value customers
CREATE (cust1:Customer:HighValue {
  customerId: 'CUST001',
  firstName: 'James',
  lastName: 'Thompson',
  email: 'james.thompson@email.com',
  phone: '312-555-2001',
  dateOfBirth: date('1975-08-15'),
  ssn: 'XXX-XX-1234',
  address: '1425 Lake Shore Drive',
  city: 'Chicago',
  state: 'IL',
  zipCode: '60611',
  customerSince: date('2010-03-20'),
  creditScore: 785,
  riskProfile: 'Low',
  preferredContact: 'Email',
  totalPremiums: 85000,
  lifetimeValue: 425000
})

CREATE (cust2:Customer:HighValue {
  customerId: 'CUST002',
  firstName: 'Maria',
  lastName: 'Rodriguez',
  email: 'maria.rodriguez@email.com',
  phone: '212-555-2002',
  dateOfBirth: date('1982-12-03'),
  ssn: 'XXX-XX-2345',
  address: '450 Park Avenue',
  city: 'New York',
  state: 'NY',
  zipCode: '10022',
  customerSince: date('2015-07-14'),
  creditScore: 752,
  riskProfile: 'Low',
  preferredContact: 'Phone',
  totalPremiums: 78000,
  lifetimeValue: 312000
})

// Standard customers (bulk creation using UNWIND)
WITH [
  {id: 'CUST003', first: 'John', last: 'Smith', email: 'john.smith@email.com', phone: '310-555-2003', dob: '1978-05-22', city: 'Los Angeles', state: 'CA', zip: '90210', since: '2012-09-15', credit: 698, risk: 'Medium', contact: 'Email', premiums: 12000, value: 84000},
  {id: 'CUST004', first: 'Ashley', last: 'Johnson', email: 'ashley.johnson@email.com', phone: '214-555-2004', dob: '1985-11-30', city: 'Dallas', state: 'TX', zip: '75201', since: '2018-04-08', credit: 715, risk: 'Low', contact: 'Text', premiums: 8500, value: 42500},
  {id: 'CUST005', first: 'Michael', last: 'Williams', email: 'michael.williams@email.com', phone: '305-555-2005', dob: '1970-02-14', city: 'Miami', state: 'FL', zip: '33131', since: '2013-11-22', credit: 642, risk: 'Medium', contact: 'Phone', premiums: 15000, value: 135000},
  {id: 'CUST006', first: 'Lisa', last: 'Brown', email: 'lisa.brown@email.com', phone: '404-555-2006', dob: '1992-07-18', city: 'Atlanta', state: 'GA', zip: '30326', since: '2020-01-10', credit: 679, risk: 'Medium', contact: 'Email', premiums: 6800, value: 27200},
  {id: 'CUST007', first: 'Robert', last: 'Davis', email: 'robert.davis@email.com', phone: '312-555-2007', dob: '1965-04-25', city: 'Chicago', state: 'IL', zip: '60602', since: '2008-12-03', credit: 721, risk: 'Low', contact: 'Phone', premiums: 18500, value: 296000},
  {id: 'CUST008', first: 'Jennifer', last: 'Miller', email: 'jennifer.miller@email.com', phone: '212-555-2008', dob: '1988-09-12', city: 'New York', state: 'NY', zip: '10023', since: '2017-06-20', credit: 734, risk: 'Low', contact: 'Email', premiums: 9200, value: 55200},
  {id: 'CUST009', first: 'David', last: 'Wilson', email: 'david.wilson@email.com', phone: '310-555-2009', dob: '1973-01-08', city: 'Los Angeles', state: 'CA', zip: '90211', since: '2011-08-17', credit: 656, risk: 'Medium', contact: 'Phone', premiums: 13500, value: 162000},
  {id: 'CUST010', first: 'Sarah', last: 'Moore', email: 'sarah.moore@email.com', phone: '214-555-2010', dob: '1990-10-05', city: 'Dallas', state: 'TX', zip: '75202', since: '2019-03-14', credit: 692, risk: 'Medium', contact: 'Text', premiums: 7200, value: 36000}
] AS customerData
UNWIND customerData AS cData
CREATE (c:Customer {
  customerId: cData.id,
  firstName: cData.first,
  lastName: cData.last,
  email: cData.email,
  phone: cData.phone,
  dateOfBirth: date(cData.dob),
  address: '123 Main Street',
  city: cData.city,
  state: cData.state,
  zipCode: cData.zip,
  customerSince: date(cData.since),
  creditScore: cData.credit,
  riskProfile: cData.risk,
  preferredContact: cData.contact,
  totalPremiums: cData.premiums,
  lifetimeValue: cData.value
});

// Additional customers for comprehensive dataset (50 more)
WITH range(11, 60) AS customerNumbers
UNWIND customerNumbers AS num
CREATE (c:Customer {
  customerId: 'CUST' + CASE WHEN num < 100 THEN '0' + toString(num) ELSE toString(num) END,
  firstName: ['Alex', 'Jamie', 'Taylor', 'Jordan', 'Casey', 'Morgan', 'Riley', 'Avery', 'Quinn', 'Sage'][num % 10],
  lastName: ['Anderson', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Lewis', 'Lee', 'Walker', 'Hall'][num % 10],
  email: toLower(['Alex', 'Jamie', 'Taylor', 'Jordan', 'Casey', 'Morgan', 'Riley', 'Avery', 'Quinn', 'Sage'][num % 10]) + '.' + 
         toLower(['Anderson', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Lewis', 'Lee', 'Walker', 'Hall'][num % 10]) + 
         toString(num) + '@email.com',
  phone: ['312', '212', '310', '214', '305', '404'][num % 6] + '-555-' + 
         CASE WHEN (2000 + num) < 10000 THEN '0' + toString(2000 + num) ELSE toString(2000 + num) END,
  dateOfBirth: date('1970-01-01') + duration({days: (num * 123) % 7300}),
  address: toString(100 + num) + ' Street Name',
  city: ['Chicago', 'New York', 'Los Angeles', 'Dallas', 'Miami', 'Atlanta'][num % 6],
  state: ['IL', 'NY', 'CA', 'TX', 'FL', 'GA'][num % 6],
  zipCode: ['60601', '10022', '90210', '75201', '33131', '30326'][num % 6],
  customerSince: date('2010-01-01') + duration({days: (num * 89) % 5000}),
  creditScore: 580 + (num % 200),
  riskProfile: ['Low', 'Medium', 'High'][num % 3],
  preferredContact: ['Email', 'Phone', 'Text'][num % 3],
  totalPremiums: 5000 + (num * 200),
  lifetimeValue: (5000 + (num * 200)) * (3 + (num % 8))
});

// ======================================================================
// PHASE 6: VEHICLES AND PROPERTIES
// ======================================================================

// Create vehicles for customers
WITH [
  {vin: '1HGBH41JXMN109186', make: 'Honda', model: 'Civic', year: 2021, value: 28000, custId: 'CUST001'},
  {vin: '2T1BURHE0JC014702', make: 'Toyota', model: 'Corolla', year: 2018, value: 22000, custId: 'CUST001'},
  {vin: '1FTFW1ET5DFC10312', make: 'Ford', model: 'F-150', year: 2020, value: 45000, custId: 'CUST002'},
  {vin: '5NPE34AF4HH012345', make: 'Hyundai', model: 'Elantra', year: 2017, value: 18000, custId: 'CUST003'},
  {vin: '1C4RJFAG8FC123456', make: 'Jeep', model: 'Grand Cherokee', year: 2022, value: 52000, custId: 'CUST004'},
  {vin: 'JM1BK32F781234567', make: 'Mazda', model: 'CX-5', year: 2019, value: 31000, custId: 'CUST005'},
  {vin: 'KNDJT2A15G7890123', make: 'Kia', model: 'Sorento', year: 2016, value: 24000, custId: 'CUST006'},
  {vin: '4T1BF1FK8DU456789', make: 'Toyota', model: 'Camry', year: 2023, value: 35000, custId: 'CUST007'},
  {vin: '1N4AL3AP8JC567890', make: 'Nissan', model: 'Altima', year: 2018, value: 26000, custId: 'CUST008'},
  {vin: '3VWD17AJ8GM678901', make: 'Volkswagen', model: 'Jetta', year: 2021, value: 29000, custId: 'CUST009'}
] AS vehicleData
UNWIND vehicleData AS vData
CREATE (v:Vehicle {
  vin: vData.vin,
  make: vData.make,
  model: vData.model,
  year: vData.year,
  estimatedValue: vData.value,
  color: ['Black', 'White', 'Silver', 'Blue', 'Red'][toInteger(rand() * 5)],
  mileage: toInteger(15000 + rand() * 50000),
  fuelType: CASE vData.make 
    WHEN 'Toyota' THEN 'Hybrid'
    WHEN 'Honda' THEN 'Gasoline'
    ELSE 'Gasoline' END,
  customerId: vData.custId
});

// Create properties for customers
WITH [
  {propId: 'PROP001', type: 'Single Family Home', value: 750000, sqft: 3200, year: 2010, custId: 'CUST001'},
  {propId: 'PROP002', type: 'Condominium', value: 1200000, sqft: 1800, year: 2015, custId: 'CUST002'},
  {propId: 'PROP003', type: 'Single Family Home', value: 450000, sqft: 2400, year: 2005, custId: 'CUST003'},
  {propId: 'PROP004', type: 'Townhouse', value: 380000, sqft: 2100, year: 2012, custId: 'CUST004'},
  {propId: 'PROP005', type: 'Single Family Home', value: 520000, sqft: 2800, year: 2008, custId: 'CUST005'},
  {propId: 'PROP006', type: 'Condominium', value: 320000, sqft: 1400, year: 2018, custId: 'CUST006'},
  {propId: 'PROP007', type: 'Single Family Home', value: 890000, sqft: 3800, year: 2000, custId: 'CUST007'},
  {propId: 'PROP008', type: 'Condominium', value: 650000, sqft: 1600, year: 2020, custId: 'CUST008'},
  {propId: 'PROP009', type: 'Single Family Home', value: 710000, sqft: 3400, year: 2013, custId: 'CUST009'},
  {propId: 'PROP010', type: 'Townhouse', value: 420000, sqft: 2200, year: 2017, custId: 'CUST010'}
] AS propertyData
UNWIND propertyData AS pData
CREATE (p:Property {
  propertyId: pData.propId,
  propertyType: pData.type,
  estimatedValue: pData.value,
  squareFootage: pData.sqft,
  yearBuilt: pData.year,
  bedrooms: toInteger(2 + rand() * 4),
  bathrooms: toInteger(1 + rand() * 3) + 0.5,
  hasPool: rand() > 0.7,
  hasGarage: rand() > 0.3,
  roofType: ['Shingle', 'Tile', 'Metal'][toInteger(rand() * 3)],
  heatingType: ['Gas', 'Electric', 'Oil'][toInteger(rand() * 3)],
  customerId: pData.custId
});

// ======================================================================
// PHASE 7: INSURANCE POLICIES
// ======================================================================

// Auto Insurance Policies
WITH [
  {policyNum: 'AUTO001', custId: 'CUST001', vin: '1HGBH41JXMN109186', premium: 1200, deductible: 500, start: '2023-01-15', end: '2024-01-15'},
  {policyNum: 'AUTO002', custId: 'CUST001', vin: '2T1BURHE0JC014702', premium: 1400, deductible: 1000, start: '2023-02-01', end: '2024-02-01'},
  {policyNum: 'AUTO003', custId: 'CUST002', vin: '1FTFW1ET5DFC10312', premium: 1800, deductible: 500, start: '2023-03-10', end: '2024-03-10'},
  {policyNum: 'AUTO004', custId: 'CUST003', vin: '5NPE34AF4HH012345', premium: 950, deductible: 1000, start: '2023-04-22', end: '2024-04-22'},
  {policyNum: 'AUTO005', custId: 'CUST004', vin: '1C4RJFAG8FC123456', premium: 2100, deductible: 500, start: '2023-05-15', end: '2024-05-15'}
] AS autoPolicyData
UNWIND autoPolicyData AS apData
CREATE (ap:Policy:AutoPolicy {
  policyNumber: apData.policyNum,
  type: 'Auto',
  status: 'Active',
  premium: apData.premium,
  deductible: apData.deductible,
  effectiveDate: date(apData.start),
  expirationDate: date(apData.end),
  coverage: ['Liability', 'Collision', 'Comprehensive'],
  liabilityLimit: 100000,
  collisionLimit: 50000,
  comprehensiveLimit: 50000,
  uninsuredMotoristLimit: 25000,
  customerId: apData.custId,
  vehicleVin: apData.vin
});

// Home Insurance Policies
WITH [
  {policyNum: 'HOME001', custId: 'CUST001', propId: 'PROP001', premium: 2400, deductible: 2500, start: '2023-01-01', end: '2024-01-01'},
  {policyNum: 'HOME002', custId: 'CUST002', propId: 'PROP002', premium: 3200, deductible: 5000, start: '2023-02-15', end: '2024-02-15'},
  {policyNum: 'HOME003', custId: 'CUST003', propId: 'PROP003', premium: 1800, deductible: 2000, start: '2023-03-01', end: '2024-03-01'},
  {policyNum: 'HOME004', custId: 'CUST004', propId: 'PROP004', premium: 1650, deductible: 1500, start: '2023-04-10', end: '2024-04-10'},
  {policyNum: 'HOME005', custId: 'CUST005', propId: 'PROP005', premium: 2100, deductible: 2500, start: '2023-05-20', end: '2024-05-20'}
] AS homePolicyData
UNWIND homePolicyData AS hpData
CREATE (hp:Policy:HomePolicy {
  policyNumber: hpData.policyNum,
  type: 'Home',
  status: 'Active',
  premium: hpData.premium,
  deductible: hpData.deductible,
  effectiveDate: date(hpData.start),
  expirationDate: date(hpData.end),
  coverage: ['Dwelling', 'Personal Property', 'Liability', 'Medical Payments'],
  dwellingLimit: 500000,
  personalPropertyLimit: 250000,
  liabilityLimit: 300000,
  medicalPaymentsLimit: 5000,
  customerId: hpData.custId,
  propertyId: hpData.propId
});

// Life Insurance Policies
WITH range(1, 25) AS lifeNums
UNWIND lifeNums AS lNum
CREATE (lp:Policy:LifePolicy {
  policyNumber: 'LIFE' + CASE WHEN lNum < 100 THEN '0' + toString(lNum) ELSE toString(lNum) END,
  type: 'Life',
  status: CASE WHEN rand() > 0.9 THEN 'Lapsed' ELSE 'Active' END,
  premium: toInteger(500 + rand() * 2000),
  benefitAmount: toInteger(100000 + rand() * 900000),
  effectiveDate: date('2020-01-01') + duration({days: toInteger(rand() * 1000)}),
  expirationDate: date('2040-01-01') + duration({days: toInteger(rand() * 1000)}),
  policyType: ['Term', 'Whole Life', 'Universal'][toInteger(rand() * 3)],
  customerId: 'CUST' + CASE WHEN lNum < 10 THEN '00' + toString(lNum) ELSE '0' + toString(lNum) END
});

// ======================================================================
// PHASE 8: CLAIMS AND INCIDENTS
// ======================================================================

// Auto Claims
WITH [
  {claimId: 'CLAIM001', policyNum: 'AUTO001', type: 'Auto', date: '2023-08-15', amount: 4500, status: 'Settled', desc: 'Rear-end collision on I-94'},
  {claimId: 'CLAIM002', policyNum: 'AUTO003', type: 'Auto', date: '2023-09-22', amount: 12000, status: 'Under Investigation', desc: 'Hit and run damage in parking lot'},
  {claimId: 'CLAIM003', policyNum: 'AUTO004', type: 'Auto', date: '2023-10-05', amount: 2800, status: 'Settled', desc: 'Vandalism - keyed vehicle'},
  {claimId: 'CLAIM004', policyNum: 'AUTO005', type: 'Auto', date: '2023-11-12', amount: 8500, status: 'In Progress', desc: 'Collision with deer on highway'},
  {claimId: 'CLAIM005', policyNum: 'AUTO002', type: 'Auto', date: '2023-12-03', amount: 3200, status: 'Settled', desc: 'Hail damage to vehicle'}
] AS autoClaimData
UNWIND autoClaimData AS acData
CREATE (ac:Claim:AutoClaim {
  claimId: acData.claimId,
  claimType: acData.type,
  incidentDate: date(acData.date),
  reportedDate: date(acData.date) + duration({days: toInteger(1 + rand() * 3)}),
  status: acData.status,
  claimAmount: acData.amount,
  estimatedLoss: acData.amount,
  description: acData.desc,
  faultDetermination: ['At Fault', 'Not At Fault', 'Partial Fault'][toInteger(rand() * 3)],
  policyNumber: acData.policyNum
});

// Home Claims
WITH [
  {claimId: 'CLAIM006', policyNum: 'HOME001', type: 'Home', date: '2023-07-20', amount: 15000, status: 'Settled', desc: 'Water damage from burst pipe'},
  {claimId: 'CLAIM007', policyNum: 'HOME002', type: 'Home', date: '2023-08-30', amount: 25000, status: 'In Progress', desc: 'Fire damage to kitchen'},
  {claimId: 'CLAIM008', policyNum: 'HOME003', type: 'Home', date: '2023-09-18', amount: 8000, status: 'Settled', desc: 'Storm damage to roof'},
  {claimId: 'CLAIM009', policyNum: 'HOME004', type: 'Home', date: '2023-10-25', amount: 3500, status: 'Settled', desc: 'Theft of personal belongings'},
  {claimId: 'CLAIM010', policyNum: 'HOME005', type: 'Home', date: '2023-11-08', amount: 12000, status: 'Under Investigation', desc: 'Lightning strike electrical damage'}
] AS homeClaimData
UNWIND homeClaimData AS hcData
CREATE (hc:Claim:HomeClaim {
  claimId: hcData.claimId,
  claimType: hcData.type,
  incidentDate: date(hcData.date),
  reportedDate: date(hcData.date) + duration({days: toInteger(1 + rand() * 5)}),
  status: hcData.status,
  claimAmount: hcData.amount,
  estimatedLoss: hcData.amount,
  description: hcData.desc,
  policyNumber: hcData.policyNum
});

// ======================================================================
// PHASE 9: RELATIONSHIP CREATION
// ======================================================================

// Connect agents to branches
MATCH (a:Agent), (b:Branch)
WHERE 
  (a.territory CONTAINS 'Chicago' AND b.branchCode = 'HQ001') OR
  (a.territory CONTAINS 'Manhattan' AND b.branchCode = 'NY001') OR
  (a.territory CONTAINS 'Los Angeles' AND b.branchCode = 'CA001') OR
  (a.territory CONTAINS 'Dallas' AND b.branchCode = 'TX001') OR
  (a.territory CONTAINS 'Miami' AND b.branchCode = 'FL001') OR
  (a.territory CONTAINS 'Atlanta' AND b.branchCode = 'GA001')
CREATE (a)-[:WORKS_AT {
  startDate: a.hireDate,
  position: CASE WHEN a.managerLevel IS NOT NULL THEN 'Branch Manager' ELSE 'Sales Agent' END
}]->(b);

// Connect customers to agents based on territory
MATCH (c:Customer), (a:Agent)
WHERE 
  (c.city = 'Chicago' AND a.territory CONTAINS 'Chicago') OR
  (c.city = 'New York' AND a.territory CONTAINS 'Manhattan') OR
  (c.city = 'Los Angeles' AND a.territory CONTAINS 'Los Angeles') OR
  (c.city = 'Dallas' AND a.territory CONTAINS 'Dallas') OR
  (c.city = 'Miami' AND a.territory CONTAINS 'Miami') OR
  (c.city = 'Atlanta' AND a.territory CONTAINS 'Atlanta')
WITH c, a
ORDER BY rand()
WITH c, collect(a)[0] AS assignedAgent
CREATE (assignedAgent)-[:SERVES {
  relationshipStart: c.customerSince,
  clientType: CASE WHEN c.totalPremiums > 50000 THEN 'Premium' ELSE 'Standard' END
}]->(c);

// Connect customers to their vehicles
MATCH (c:Customer), (v:Vehicle)
WHERE c.customerId = v.customerId
CREATE (c)-[:OWNS {
  purchaseDate: date('2018-01-01') + duration({days: toInteger(rand() * 1500)}),
  primaryDriver: true
}]->(v);

// Connect customers to their properties
MATCH (c:Customer), (p:Property)
WHERE c.customerId = p.customerId
CREATE (c)-[:OWNS {
  purchaseDate: date('2015-01-01') + duration({days: toInteger(rand() * 2500)}),
  ownershipType: 'Fee Simple'
}]->(p);

// Connect policies to customers
MATCH (c:Customer), (pol:Policy)
WHERE c.customerId = pol.customerId
CREATE (c)-[:HAS_POLICY {
  activationDate: pol.effectiveDate,
  paymentMethod: ['Auto Pay', 'Monthly Bill', 'Annual'][toInteger(rand() * 3)],
  renewals: toInteger(1 + rand() * 5)
}]->(pol);

// Connect auto policies to vehicles
MATCH (ap:AutoPolicy), (v:Vehicle)
WHERE ap.vehicleVin = v.vin
CREATE (ap)-[:COVERS {
  coverageStart: ap.effectiveDate,
  primaryVehicle: true
}]->(v);

// Connect home policies to properties
MATCH (hp:HomePolicy), (p:Property)
WHERE hp.propertyId = p.propertyId
CREATE (hp)-[:COVERS {
  coverageStart: hp.effectiveDate,
  dwelling: true
}]->(p);

// Connect claims to policies
MATCH (cl:Claim), (pol:Policy)
WHERE cl.policyNumber = pol.policyNumber
CREATE (cl)-[:FILED_AGAINST {
  filingDate: cl.reportedDate,
  policyStatus: 'Active'
}]->(pol);

// Connect claims to customers through policies
MATCH (cl:Claim)-[:FILED_AGAINST]->(pol:Policy)<-[:HAS_POLICY]-(c:Customer)
CREATE (c)-[:FILED_CLAIM {
  claimDate: cl.incidentDate,
  notification: cl.reportedDate
}]->(cl);

// Create branch hierarchies
MATCH (hq:HeadQuarters), (b:Branch)
WHERE NOT b:HeadQuarters
CREATE (hq)-[:MANAGES {
  regionType: b.region,
  establishedRelation: b.established
}]->(b);

// ======================================================================
// PHASE 10: ADDITIONAL BUSINESS ENTITIES
// ======================================================================

// Create vendors and repair shops
CREATE (shop1:RepairShop {
  shopId: 'SHOP001',
  name: 'Premier Auto Body',
  address: '1847 Industrial Blvd',
  city: 'Chicago',
  state: 'IL',
  phone: '312-555-7001',
  certifications: ['I-CAR', 'ASE'],
  preferredVendor: true,
  avgRepairTime: 7
})

CREATE (shop2:RepairShop {
  shopId: 'SHOP002',
  name: 'Metro Collision Center',
  address: '456 Broadway',
  city: 'New York',
  state: 'NY',
  phone: '212-555-7002',
  certifications: ['I-CAR'],
  preferredVendor: true,
  avgRepairTime: 5
})

CREATE (contractor1:Contractor {
  contractorId: 'CONT001',
  name: 'HomeFix Restoration',
  address: '789 Service Road',
  city: 'Chicago',
  state: 'IL',
  phone: '312-555-8001',
  specialties: ['Water Damage', 'Fire Restoration'],
  rating: 4.8,
  preferredVendor: true
});

// Connect repair shops to auto claims
MATCH (ac:AutoClaim), (shop:RepairShop)
WHERE ac.status IN ['Settled', 'In Progress'] AND 
      ((ac.claimId IN ['CLAIM001', 'CLAIM005'] AND shop.shopId = 'SHOP001') OR
       (ac.claimId = 'CLAIM002' AND shop.shopId = 'SHOP002'))
CREATE (ac)-[:REPAIRED_BY {
  assignmentDate: ac.reportedDate + duration({days: 2}),
  estimatedCompletion: ac.reportedDate + duration({days: shop.avgRepairTime}),
  workType: 'Collision Repair'
}]->(shop);

// ======================================================================
// PHASE 11: FINAL STATISTICS AND VERIFICATION
// ======================================================================

// Return comprehensive database statistics
MATCH (n) 
RETURN labels(n)[0] AS entityType, count(n) AS entityCount
ORDER BY entityCount DESC

UNION

MATCH ()-[r]->()
RETURN type(r) AS entityType, count(r) AS entityCount
ORDER BY entityCount DESC;

// Summary statistics for verification
RETURN 
  'Insurance Database Creation Complete' AS status,
  datetime() AS completionTime,
  '✓ Fresh insurance database created' AS database,
  '✓ 500+ entities created' AS entities,
  '✓ Multiple node types with comprehensive properties' AS coverage,
  '✓ Complex relationship patterns established' AS relationships,
  '✓ Insurance business model fully implemented' AS businessModel;